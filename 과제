*** 테이블 및 시퀀스 작성 ***
1. 테이블 이름 : hakjum
 LOWSCORE     NUMBER(3)
 HISCORE      NUMBER(5,2)
 GRADE        VARCHAR2(3)  -- 기본키

sql>select * from hakjum
LOWSCORE HISCORE GRADE
---------- ---------- ------
         0      59.99       F
        60      64.99      D0
        65      69.99      D+
        70      74.99      C0
        75      79.99      C+
        80      84.99      B0
        85      89.99      B+
        90      94.99      A0
        95      100        A+
        
 2. 테이블 이름 : student
 NO               NUMBER  -- 기본키
 NAME           VARCHAR2(21) -- not null
 KOR              NUMBER(3)  -- 0~100 사이의 값, not null
 MATH           NUMBER(3)  -- 0~100 사이의 값,not null
 ENG              NUMBER(3)  -- 0~100 사이의 값,not null
 TOT              NUMBER(3)
 AVG              NUMBER(5,2)
 GRADE          VARCHAR2(3)

3. 제약조건
    student의 GRADE 컬럼은 hakjum테이블의 GRADE컬럼을 부모키로 사용합니다.
    student의 GRADE 컬럼은 외래키입니다.

4. 1부터 1씩 증가하는 시퀀스 만들기
    시퀀스 이름:  student_seq
    
    
    
    
 *** Student3 클래스를 만들어 봅시다. ***
 1. 모든 컬럼을 setter와 getter메서드 작성합니다.
 
 2. toString() 작성합니다. 
    - 모든 필드를 문자열로 연결해서 리턴합니다. 
    - 필드 사이에 "\t"를 넣어 주세요
    
 3. 클래스의 일부분입니다.   
    public class Student3 {
		private int no;
		private String name;
		private int kor;
		private int math;
		private int eng;
		private int tot;
		private float avg;
		private String grade;
	
	public Student3() {
		
	}
	public Student3(String name, int kor, int math,int  eng) {
		this.name =name;
		this.kor =kor;
		this.math = math;
		this.eng = eng;
		this.tot = kor + math + eng ;
		this.avg = tot/3f;
	}
	   
    public String toString() {
      //완성해 주세요
    }
    
    
*** 다음 main()메서드와 출력결과를 참고로 DAO 클래스와 각각의 메서드를 완성하세요. ***
public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);		
		DAO dao = new DAO();	

		do {
			int menu = menuselect(sc);
			switch (menu) {
			case 1:
				insert(sc, dao);
				break;
			case 2:
				select(sc, dao);
				break;
			case 3:
				update(sc, dao);
				break;
			case 4:
				delete(sc, dao);
				break;
			case 5:
				selectAll(dao);
				break;
			case 6:
			     sc.close();
				 return;
			}
		} while (true);
	}



*** 메서드 ***
1. menuselect
   (1) 반환형 :  정수
   (2) 매개변수 : Scanner형 1개
   (3) 기능
        - 메뉴 항목을 String 배열(menus)로 만든 후 메뉴 항목을 출력합니다.
        - 메뉴를 입력받은 후 리턴합니다.
   (4) 리턴값 : 선택한 메뉴의 값입니다.
          inputNumber(sc, 1, menus.length);를 호출한 결과값입니다.
          
 출력결과)
===========================================================
1.입력
2.조회
3.수정
4.삭제
5.모두조회
6.종료
===========================================================
메뉴를 선택하세요>y
숫자로 입력하세요>u
숫자로 입력하세요>8
1~6사이의 숫자를 입력하세요>7
1~6사이의 숫자를 입력하세요>1


2. inputNumber(Scanner sc, int start, int end)          
     입력한 데이터가 숫자인지와 범위(1~menus.length)의 값인지 확인 후 
     조건에 맞는 숫자만 리턴하는 메서드
